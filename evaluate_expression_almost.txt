using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AndroCompiler
{
    class EvaluateExpression
    {
        private readonly Expresie exp;

        public EvaluateExpression(Expresie expresie)
        {
            exp = expresie;
        }
        private object evaluate(Expresie expresie)
        {
            if (expresie is ExpresieNumerica n)
            {
                //return (int)n.Numar.Value;
                if (n.Numar.AtomType == atomType.nr_intreg)
                    return Convert.ToInt32(n.Numar.Value);
                else if (n.Numar.AtomType == atomType.nr_float)
                    return Convert.ToDecimal(n.Numar.Value);
                else
                {
                    throw new Exception("Eroare");
                }
            }
            if(expresie is ExpresieText et)
            {
                return Convert.ToString(et.atomLexicalString.Value);
            } 
            if (expresie is ExpresieParanteze p)
            {
                return evaluate(p.Expresie);
            }
            if (expresie is ExpresieBinara b)
            {
                var stg = b.ExpresieStg;
                var dr = b.ExpresieDr;
                var op = b.OperatorLexical;

                if(op.tip == atomType.Plus)
                {
                    if (stg.tip == atomType.text && stg.tip == dr.tip)
                    {
                        return Convert.ToString(evaluate(stg)) + Convert.ToString(evaluate(dr));
                    }
                    else
                    {
                        if (stg.tip == atomType.text || dr.tip == atomType.text)
                            throw new Exception("Eroare");
                        else
                            return Convert.ToDecimal(evaluate(stg)) + Convert.ToDecimal(evaluate(dr));
                    }
                }
                if (op.tip == atomType.Minus)
                {
                    if (stg.tip == atomType.text || dr.tip == atomType.text)
                        throw new Exception("Eroare");
                    else
                        return Convert.ToDecimal(evaluate(stg)) - Convert.ToDecimal(evaluate(dr));
                }
                if (op.tip == atomType.Inmultire)
                {
                    if (stg.tip == atomType.text || dr.tip == atomType.text)
                        throw new Exception("Eroare");
                    else
                        return Convert.ToDecimal(evaluate(stg)) * Convert.ToDecimal(evaluate(dr));
                }
                if (op.tip == atomType.Impartire)
                {
                    if (stg.tip == atomType.text || dr.tip == atomType.text)
                        throw new Exception("Eroare");
                    else
                        return Convert.ToDecimal(evaluate(stg)) / Convert.ToDecimal(evaluate(dr));
                }

                //if (op.tip == atomType.Plus)
                //{
                //    return evaluate(stg) + evaluate(dr);
                //}
                //if (op.tip == atomType.Minus)
                //{
                //    return evaluate(stg) - evaluate(dr);
                //}
                //if (op.tip == atomType.Inmultire)
                //{
                //    return evaluate(stg) * evaluate(dr);
                //}
                //if (op.tip == atomType.Impartire)
                //{
                //    return evaluate(stg) / evaluate(dr);
                //}
            }
            throw new Exception("Expresie invalida!");
        }

        public object getEvaluate => evaluate(exp);
    }
}